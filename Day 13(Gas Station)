class Solution1:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        n=len(gas)
        d={}
        for i in range(n):
            j=0
            bag=gas[i]
            p=bag
            k=i
            while(j<n):
                if(k in d and d[k]>=bag):
                    break
                if(bag>=cost[k]):
                    bag=bag-cost[k]
                    k=(k+1)%n
                    bag+=gas[k]
                    j+=1
                else:
                    break
            if(j==n):
                return i
            else:
                d[i]=p
        return -1
class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        if(sum(gas)<sum(cost)):
            return -1
        else:
            total=0
            start=0
            for i in range(len(gas)):
                total+=(gas[i]-cost[i])
                if(total<0):
                    total=0
                    start=i+1
            return start
        
        
        
# class Solution {
# public:
#     int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
#         int n = gas.size();
#         for(int i=0;i<n;i++)
#         {
            
#             int j=0;
#             int bag=gas[i];
#             int k=i;
#             while(j<n)
#             {
#                 if(bag>=cost[k])
#                 {
#                     bag=bag-cost[k];
#                     k=(k+1)%n;
#                     bag+=gas[k];
#                     j+=1;
#                 }
#                 else{
#                     break;
#                 }
#             }
#             if(j==n)
#             {
#                 return i;
#             }
            
#         }
#         return -1;
        
#     }
# };
