/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// S1 of 430. Flatten a Multilevel Doubly Linked List
class Solution {
public:
    void flatten(TreeNode* root) {
        if (root)
            f1(root);
    }
private:
    TreeNode* f1(TreeNode* root) {
        if (root == nullptr)
            return nullptr;
        
        TreeNode* leftTail = f1(root->left); // Process left subtree
        TreeNode* rightTail = f1(root->right); // Process right subtree
        
        // If there's a left subtree, attach it to the right of the root
        if (leftTail) {
            leftTail->right = root->right;
            root->right = root->left;
            root->left = nullptr;
        }
        
        // Determine and return the rightmost node of the flattened subtree
        return rightTail ? rightTail : (leftTail ? leftTail : root);
    }
};
