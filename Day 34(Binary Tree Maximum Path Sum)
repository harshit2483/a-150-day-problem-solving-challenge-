/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxPathSum(TreeNode* root) {
        if(!root) return 0;
        int m=root->val;
        int nodes=0;
        count(root,nodes,m);
        
        int t=f1(root);
        if(nodes>0 && t==0)
        {
            t=m;
        }
        return t;
        
    }
    void count(TreeNode* root,int &nodes,int &m)
    {
        if(!root) return;
        nodes+=1;
        if(root->val>m)
        {
            m=root->val;
        }
        count(root->left,nodes,m);
        count(root->right,nodes,m);
    }
    int f1(TreeNode* root)
    {
        
        if(!root) return 0;
        if(root->left==nullptr && root->right==nullptr)
        {
            return root->val;
        }
        int without=max(f1(root->left),f1(root->right));
        int with=f2(root);
        return max(with,without);
    }
    int f2(TreeNode* root)
    {
        return f3(root->left,0,0)+root->val+f3(root->right,0,0);
    }
    int f3(TreeNode* root,int cur,int t)
    {
        if(!root) return t;
        cur+=root->val;
        if(cur>t)
        {
            t=cur;
        }
        return max(f3(root->left,cur,t),f3(root->right,cur,t));
    }
};
